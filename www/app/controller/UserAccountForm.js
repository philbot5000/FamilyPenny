/*
 * File: app/controller/UserAccountForm.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FP.controller.UserAccountForm', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'userAccountForm': 'showUserAccountForm',
            'userAccountForm/edit': 'showUserAccountFormEdit'
        },

        control: {
            "button#saveUserAccount": {
                tap: 'onSaveUserAccountTap'
            },
            "hiddenfield#account_id": {
                initialize: 'onAccount_idInitialize'
            },
            "selectfield#type": {
                change: 'onTypeChange'
            }
        }
    },

    onSaveUserAccountTap: function(button, e, eOpts) {
        var account = Ext.ComponentQuery.query('#userAccountForm')[0],
            accountValues = account.getValues(),
            model = Ext.create('FP.model.UserAccount', accountValues),
            errorMessage = '',
            errors = model.validate();



        if(!errors.isValid()) {

            errors.each(function(err) {
                errorMessage += err.getMessage() + '<br />';
            });

            Ext.Msg.alert('User account is invalid', errorMessage);

        } else {

            if(account.edit) {

                this.updateUserAccount(accountValues);

            } else {

                this.addUserAccount(accountValues);

            }
        }
    },

    onAccount_idInitialize: function(component, eOpts) {
        component.setValue(FP.config.Runtime.getAccount().id);
    },

    onTypeChange: function(selectfield, newValue, oldValue, eOpts) {
        this.showAccountOptions(newValue);
    },

    showUserAccountForm: function() {
        var main = Ext.getCmp('main'),
            addUserAccount = Ext.create('FP.view.UserAccountForm'),
            set = Ext.ComponentQuery.query('#userAccountSet')[0],
            back = main.query('#back')[0];

        back.view = '#userAccountForm';
        back.show();

        set.setTitle('Add Account');
        main.query('#accountMenu')[0].hide();
        main.setActiveItem(addUserAccount);
    },

    showUserAccountFormEdit: function() {
        var main = Ext.getCmp('main'),
            addUserAccount = Ext.create('FP.view.UserAccountForm'),
            back = main.query('#back')[0],
            set = Ext.ComponentQuery.query('#userAccountSet')[0],
            type = Ext.ComponentQuery.query('#type')[0],
            runtime = FP.config.Runtime,
            userAccount = runtime.getUserAccount();


        addUserAccount.edit = true;
        addUserAccount.setValues(userAccount);

        type.setDisabled(true);

        set.setTitle('Edit Account');

        main.query('#accountMenu')[0].hide();

        back.hide();

        main.setActiveItem(addUserAccount);
    },

    resetOldDefaultAccount: function() {
        // This function is called when a user sets an account to default.
        // Since there can be only one default account we must set all other accounts for 
        // this user back to default = false.


        // find the record that is default (should be only one).
        // set that record to dafualt false

        var store = Ext.getStore('userAccounts');

        store.filter('account_id', FP.config.Runtime.getAccount().id);

        var index = store.findExact('defaultAccount', true);

        if(index !== -1) {

            var record = store.getAt(index);

            console.log(record);

            record.set('defaultAccount', false);
        }

        store.clearFilter();
    },

    deleteAccount: function(id) {
        // First delete all transactions from AccountBalance store where id = userAccount_id
        // Once all transactions are deleted remove account where id = id.

        // Filter store then use each function to iterate over and remove records
        // 

        var accountBalanceStore = Ext.getStore('accountBalance'),
            index = store.findExact('id', id),
            record = store.getAt(index);


    },

    showAccountOptions: function(account) {
        //console.log(account);
        var term = Ext.ComponentQuery.query('#term')[0],
            interest = Ext.ComponentQuery.query('#interest')[0],
            creditLimit = Ext.ComponentQuery.query('#creditLimit')[0],
            loanAmount = Ext.ComponentQuery.query('#loanAmount')[0],
            termType = Ext.ComponentQuery.query('radiofield');

        switch(account) {
            case "Credit Account":
            term.hide();
            loanAmount.hide();
            creditLimit.show();
            interest.show();

            break;

            case "Cash Account":
            term.hide();
            interest.hide();
            loanAmount.hide();
            creditLimit.hide();
            break;

            case "Savings Account":
            interest.show();
            term.hide();
            loanAmount.hide();
            creditLimit.hide();
            break;

            case "Loan Account":
            interest.show();
            term.show();
            loanAmount.show();
            creditLimit.hide();
            //amount.show();
            break;
        }


    },

    addUserAccount: function(accountValues) {
        var store = Ext.getStore('userAccounts'),
            model = Ext.create('FP.model.UserAccount', accountValues);


        if(accountValues.defaultAccount) {
            this.resetOldDefaultAccount();
        }

        model.set('balance', 0);
        store.add(model);
        store.sync();
        FP.config.Runtime.setUserAccount(model.data);
        FP.app.updateNumberOfAccounts();
        this.redirectTo('userAccounts');
    },

    updateUserAccount: function(accountValues) {
        // get record in local storage and set new values and sync...
        var id = FP.config.Runtime.getUserAccount().id,
            store = Ext.getStore('userAccounts'),
            index = store.findExact('id', id),
            record = store.getAt(index);

        //Ext.ComponentQuery.query('#editUser')[0].setText('Edit');
        //Ext.ComponentQuery.query('#back')[0].show();

        if(accountValues.defaultAccount) {
            this.resetOldDefaultAccount();
        }

        record.set('name', accountValues.name);
        record.set('type', accountValues.type);
        record.set('interest', accountValues.interest);
        record.set('term', accountValues.term);
        record.set('defaultAccount', accountValues.defaultAccount);



        store.sync();
        this.redirectTo('accountBalance');
    }

});