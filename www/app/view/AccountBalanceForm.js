/*
 * File: app/view/AccountBalanceForm.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FP.view.AccountBalanceForm', {
    extend: 'Ext.form.Panel',

    requires: [
        'Ext.ux.field.DateTimePicker'
    ],

    config: {
        itemId: 'accountBalanceForm',
        items: [
            {
                xtype: 'fieldset',
                itemId: 'accountBalanceFormSet',
                title: 'New One-Time Transaction',
                items: [
                    {
                        xtype: 'hiddenfield',
                        itemId: 'userAccount_id',
                        name: 'userAccount_id'
                    },
                    {
                        xtype: 'selectfield',
                        itemId: 'account',
                        name: 'account',
                        placeHolder: 'Select Account',
                        autoSelect: false,
                        displayField: 'name',
                        store: 'userAccounts',
                        valueField: 'id',
                        listeners: [
                            {
                                fn: function(component, eOpts) {
                                    var main = Ext.getCmp('main'),
                                        hidden = Ext.ComponentQuery.query('#userAccount_id')[0],
                                        runtime = FP.config.Runtime;


                                    if(main.defaultAccountTransaction) {

                                        // get default account for this user
                                        var store = Ext.getStore('userAccounts');

                                        store.filter('account_id', runtime.getAccount().id);

                                        var index = store.findExact('defaultAccount', true);

                                        // if record is found set the default account, else set to ''
                                        if(index !== -1) {
                                            var record = store.getAt(index);

                                            console.log(record);
                                            hidden.setValue(record.data.id);
                                            component.setValue(record.data.name);
                                            FP.config.Runtime.setUserAccount(record.data);
                                        } else {
                                            component.setValue('');
                                        }

                                        //store.clearFilter();
                                    }

                                    if(!main.defaultAccountTransaction) {
                                        component.setValue(runtime.getUserAccount().name);
                                        hidden.setValue(runtime.getUserAccount().id);
                                    }
                                },
                                event: 'initialize'
                            }
                        ]
                    },
                    {
                        xtype: 'selectfield',
                        hidden: true,
                        itemId: 'category',
                        name: 'category',
                        placeHolder: 'Category'
                    },
                    {
                        xtype: 'textfield',
                        itemId: 'description',
                        name: 'description',
                        autoCapitalize: true,
                        placeHolder: 'Description'
                    },
                    {
                        xtype: 'container',
                        height: 50,
                        hidden: true,
                        itemId: 'categoryContainer',
                        layout: {
                            align: 'center',
                            type: 'hbox'
                        },
                        items: [
                            {
                                xtype: 'button',
                                height: 38,
                                itemId: 'addCategory',
                                margin: '0 5 0 5',
                                style: 'border-radius: 40px;',
                                styleHtmlContent: true,
                                ui: 'round',
                                width: 38,
                                iconAlign: 'center',
                                iconCls: 'add',
                                text: ''
                            }
                        ]
                    },
                    {
                        xtype: 'numberfield',
                        itemId: 'amount',
                        name: 'amount',
                        placeHolder: '$0.00',
                        stepValue: 0.01
                    },
                    {
                        xtype: 'container',
                        height: 50,
                        itemId: 'dateTimeContainer',
                        listeners: [
                            {
                                fn: function(component, eOpts) {
                                    component.add({
                                        xtype: 'datetimepickerfield',
                                        name: 'date',
                                        cancelButton: null,
                                        placeHolder: 'Date',
                                        dateTimeFormat: 'n/j/Y',
                                        picker: {
                                            yearFrom: 1980,
                                            ampm : false,
                                            slotOrder: ['month','day','year']
                                        },
                                        value: new Date()
                                    });
                                },
                                event: 'initialize'
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        padding: 10,
                        layout: {
                            pack: 'center',
                            type: 'hbox'
                        },
                        items: [
                            {
                                xtype: 'segmentedbutton',
                                flex: 1,
                                items: [
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        hidden: true,
                                        itemId: 'deleteTransaction',
                                        ui: 'decline',
                                        iconCls: 'trash',
                                        text: 'Delete'
                                    },
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        itemId: 'addTransaction',
                                        ui: 'confirm',
                                        iconCls: 'compose',
                                        text: 'Save'
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onAccountChange',
                event: 'change',
                delegate: '#account'
            }
        ]
    },

    onAccountChange: function(selectfield, newValue, oldValue, eOpts) {
        var hidden = Ext.ComponentQuery.query('#userAccount_id')[0],
            store = Ext.getStore('userAccounts'),
            index = store.findExact('id', newValue),
            record = store.getAt(index);


        //FP.config.Runtime.setUserAccount(record.data);

        hidden.setValue(newValue);


        // find exact userAccount with id... set userAccount() in runtime
        //console.log(newValue);


        //this.changeAccount(newValue);
    }

});