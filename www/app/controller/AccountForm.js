/*
 * File: app/controller/AccountForm.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FP.controller.AccountForm', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'accountForm': 'showAccountForm',
            'accountForm/edit': 'showAccountFormEdit'
        },

        control: {
            "formpanel#accountForm": {
                show: 'onAccountFormShow'
            },
            "button#submitUser": {
                tap: 'onSubmitUserTap'
            },
            "button#deleteUser": {
                tap: 'onDeleteUserTap'
            },
            "button#takeImageButton": {
                tap: 'onTakeImageButtonTap'
            }
        }
    },

    onAccountFormShow: function(component, eOpts) {
        /*component.on('hide', function() {
        setTimeout(function() {
        component.destroy();
        }, 1000);
        });*/
    },

    onSubmitUserTap: function(button, e, eOpts) {
        var account = Ext.ComponentQuery.query('#accountForm')[0],
            accountValues = account.getValues(),
            store = Ext.getStore('accounts'),
            model = Ext.create('FP.model.Account', accountValues),
            errorMessage,
            errors = model.validate();


        if(account.edit) {
            // get record in local storage and set new values and sync...
            var id = FP.config.Runtime.getAccount().id,
                index = store.findExact('id', id),
                record = store.getAt(index);

            record.set('firstName', accountValues.firstName);
            record.set('lastName', accountValues.lastName);

            store.sync();
            this.redirectTo('accounts');


        } else {

            if(!errors.isValid()) {
                errors.each(function(err) {
                    errorMessage += err.getMessage() + '\n';
                });

                alert('Work in progress'+errorMessage);
                console.log(errorMessage);

            } else {

                model.set('accounts', 0);
                store.add(model);
                store.sync();

                this.redirectTo('accounts');
            }
        }
    },

    onDeleteUserTap: function(button, e, eOpts) {
        this.deleteUser();
    },

    onTakeImageButtonTap: function(button, e, eOpts) {
        //console.log(FP.app.takePicture());
        //Ext.ComponentQuery.query('#image')[0].setValue('hey');

        /****
        * Phonegap specific code
        * Camera Capture
        *
        ***/
        var me = this;
        var settings = {
            quality: 90,
            sourceType : Camera.PictureSourceType.PHOTOLIBRARY,
            encodingType: Camera.EncodingType.JPEG,
            destinationType: Camera.DestinationType.DATA_URL,
            saveToPhotoAlbum: false,
            allowEdit : true,
            targetWidth: 350,
            targetHeight: 350,
            correctOrientation: true
        };


        navigator.camera.getPicture(onSuccess, onFail, settings);

        function onSuccess(imageData) {

            //console.log(imageData);
            console.log(Ext.ComponentQuery.query('#image')[0]);
            Ext.ComponentQuery.query('#image')[0].setValue('data:image/jpeg;base64,'+imageData);

        }

        function onFail(message) {
            //alert('Failed because: ' + message);
            //dataview.show();
        }
    },

    showAccountForm: function() {
        var main = Ext.getCmp('main'),
            addUser = Ext.create('FP.view.AccountForm'),
            back = main.query('#back')[0],
            menuButton = main.query('#menuButton')[0],
            addUserButton = main.query('#addUser')[0];


        addUserButton.hide();
        back.view = '#accountForm';
        back.show();
        menuButton.hide();

        main.setActiveItem(addUser);
    },

    showAccountFormEdit: function() {
        var main = Ext.getCmp('main'),
            editUser = Ext.create('FP.view.AccountForm'),
            back = main.query('#back')[0],
            menuButton = main.query('#menuButton')[0],
            addUserButton = main.query('#addUser')[0],
            editUserButton = main.query('#editUser')[0],
            runtime = FP.config.Runtime,
            userValues = runtime.getAccount();

        editUser.edit = true;
        console.log(runtime.getAccount());
        editUser.setValues(userValues);

        editUserButton.show();
        addUserButton.hide();
        back.hide();
        menuButton.hide();

        main.setActiveItem(editUser);
    },

    deleteUser: function() {

    }

});