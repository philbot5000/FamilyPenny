/*
 * File: app/controller/Master.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FP.controller.Master', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "container#main": {
                initialize: 'onMainInitialize'
            },
            "button#back": {
                tap: 'onBackTap'
            },
            "button#menuButton": {
                tap: 'onMenuButtonTap'
            },
            "button#addUser": {
                tap: 'onAddUserTap'
            },
            "button#editUser": {
                tap: 'onEditUserTap'
            },
            "button#addUserAccount": {
                tap: 'onAddUserAccountTap'
            },
            "button#oneTimeTransaction": {
                tap: 'onOneTimeTransactionTap'
            },
            "button#settings": {
                tap: 'onSettingsTap'
            },
            "button#mainAccounts": {
                tap: 'onMainAccountsTap'
            }
        }
    },

    onMainInitialize: function(component, eOpts) {
        var main = component.getDraggable(),
            me = this;

        component.element.addCls('main-inner');
        component.isOpen = false;

        main.on('drag', function(draggable, event, offsetX) {
            //me.fadeButtons(offsetX / 100);
        });

        main.on('dragstart', function(draggable, event) {
            component.element.removeCls('main-inner');
            if(!component.isOpen) {

                //me.showMenuButtons();
            }
        });

        main.on('dragend', function(draggable) {

            if(component.isOpen === false && draggable.offset.x > 50) {
                draggable.setOffset(100, 0, {
                    type: 'slide',
                    duration: 100
                });

                component.isOpen = true;

            } else {

                draggable.setOffset(0, 0, {
                    type: 'slide',
                    duration: 100
                });

                component.isOpen = false;
                //me.hideMenuButtons();

            }

            component.element.addCls('main-inner');
        });

        //this.redirectTo('accounts');

        var currentUser = Parse.User.current();

        if (currentUser) {
            // do stuff with the user
            FP.app.redirectTo('accounts');

        } else {
            // show the signup or login page

            FP.app.redirectTo('start');
            console.log('not logged in');

        }
    },

    onBackTap: function(button, e, eOpts) {
        var view = button.view,
            main = Ext.getCmp('main'),
            me = this;

        // back navigation logic...

        switch(view) {
            case "#accountForm":
            this.redirectTo('accounts');
            break;
            case "#accountBalance":
            this.redirectTo('userAccounts');
            break;
            case "#userAccountForm":
            this.redirectTo('userAccounts');
            break;
            case "#userAccounts":
            me.redirectTo('accounts');
            break;
        }


    },

    onMenuButtonTap: function(button, e, eOpts) {
        this.toggleMenu();
    },

    onAddUserTap: function(button, e, eOpts) {

        this.redirectTo('accountForm');
        //main.getActiveItem().getItemId();
    },

    onEditUserTap: function(button, e, eOpts) {
        var main = Ext.getCmp('main'),
            back = Ext.ComponentQuery.query('#back')[0],
            runtime = FP.config.Runtime,
            view = main.getActiveItem().getItemId();


        switch(view) {

            case "userAccounts":
            button.setText('Cancel');
            this.redirectTo('accountForm/edit');
            break;

            case "userAccountForm":
            button.setText('Edit');
            back.show();
            this.redirectTo('accountBalance');
            break;

            case "accountForm":
            button.setText('Edit');
            this.redirectTo('userAccounts');
            break;

            case "accountBalance":
            button.setText('Cancel');
            this.redirectTo('userAccountForm/edit');
            break;

            case "accountBalanceForm":
            button.setText('Edit');
            if(runtime.getUserAccount() !== null) {
                this.redirectTo('accountBalance');
            }
            else {
                this.redirectTo('userAccounts');
            }
            break;

        }
    },

    onAddUserAccountTap: function(button, e, eOpts) {
        this.redirectTo('userAccountForm');
    },

    onOneTimeTransactionTap: function(button, e, eOpts) {
        var main = Ext.getCmp('main'),
            view = main.getActiveItem().getItemId();

        console.log(view);


        // Sets a value so that account can be automatically set in AccountBalanceForm to either
        // the default account or the account the user is viewing.

        if(view === 'accountBalance') {
            main.defaultAccountTransaction = false;
        }

        if(view === 'userAccounts') {
            main.defaultAccountTransaction = true;
        }

        this.redirectTo('accountBalanceForm');
    },

    onSettingsTap: function(button, e, eOpts) {
        this.redirectTo('settings');
        this.toggleMenu();
    },

    onMainAccountsTap: function(button, e, eOpts) {
        this.redirectTo('accounts');
        this.toggleMenu();
    },

    showMenuButtons: function() {
        var menu = Ext.ComponentQuery.query('#menu')[0],
            buttons = menu.query('button');

        for(var i = 0; i < buttons.length; i++) {
            buttons[i].show();
        }
    },

    hideMenuButtons: function() {
        var menu = Ext.ComponentQuery.query('#menu')[0],
            buttons = menu.query('button');

        for(var i = 0; i < buttons.length; i++) {
            buttons[i].hide();
        }
    },

    fadeButtons: function(opacity) {
        var menu = Ext.ComponentQuery.query('#menu')[0],
            buttons = menu.query('button');


        if (opacity < 1) {
            for(var i = 0; i < buttons.length; i++) {
                buttons[i].element.setStyle('opacity', opacity);
            }
        }
    },

    toggleMenu: function() {
        var main = Ext.getCmp('main'),
            elem = main.element,
            dragObj = main.getDraggable();


        if(main.isOpen) {
            elem.translate(0,0,0);
            dragObj.setOffset(0, 0);
            //this.hideMenuButtons();
            main.isOpen = false;
            return;
        } 

        if(!main.isOpen){
            elem.translate(250,0,0);
            dragObj.setOffset(250, 0);
            //this.showMenuButtons();
            main.isOpen = true;
            return;
        }
    }

});