/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

//@require @packageOverrides
Ext.Loader.setConfig({

});

Ext.application({
    models: [
        'Account',
        'UserAccount'
    ],
    stores: [
        'Accounts',
        'UserAccounts',
        'AccountBalance'
    ],
    views: [
        'Master',
        'Accounts',
        'UserAccounts',
        'AccountBalance',
        'AccountForm',
        'UserAccountForm',
        'AccountBalanceForm',
        'MyPanel',
        'Login',
        'Start',
        'SignUp',
        'Settings',
        'Introduction'
    ],
    requires: [
        'FP.config.Runtime',
        'Ext.DateExtras',
        'Ext.MessageBox'
    ],
    controllers: [
        'Master',
        'AccountTransactions',
        'Accounts',
        'AccountForm',
        'UserAccounts',
        'UserAccountForm',
        'AccountTransactionForm',
        'Start',
        'SignUp',
        'Login',
        'Settings',
        'Introduction'
    ],
    name: 'FP',

    launch: function() {
        // Makes room for our iOS 7 toolbar...
        if(Ext.os.is.iOS) {

            if(parseFloat(device.version) >= 7.0) {

                Ext.Viewport.setMargin('20 0 0 0');
                Ext.Viewport.setHeight(Ext.Viewport.getWindowHeight() - 20);
                var body = Ext.DomQuery.select('body')[0];
                var html = Ext.DomQuery.select('html')[0];
                body.style.backgroundColor = '#1468A2';
                html.style.backgroundColor = '#1468A2';
            }
        }

        // Parse set up -------------- 
        Parse.initialize("a2pPfe7u8rb4NUO9lqFGN606n7hvDltjw3Co0m5s", "ketPek6eoZ3grYjXSJDV47jNKGUavgIlpa9MdvvM");


        Ext.create('FP.view.Master', {fullscreen: true});
    },

    calculateBalance: function() {
        var store = Ext.getStore('accountBalance'),
            records = store.data.items,
            total = 0;

        for(var i = 0; i < records.length; i++) {

            total += records[i].data.amount;

        }


        return total;
    },

    updateNumberOfAccounts: function() {
        /*  THIS FUNCTION WAS MOVED INSIDE THE UserAccountForm Controller .....





        var store = Ext.getStore('userAccounts'),
        number = store.data.length,
        userId = FP.config.Runtime.getUserAccount().account_id;


        var Account = Parse.Object.extend("Account");
        var query = new Parse.Query(Account);

        query.equalTo("localId", userId);
        query.find({
        success: function(results) {
        // should only ever be one ...
        var parseRecord = results[0];
        parseRecord.set('accounts', number);
        parseRecord.save();

        var accounts = Ext.getStore('accounts'),
            index = accounts.findExact('id', userId),
            user = accounts.getAt(index);

        user.set('accounts', number);
        accounts.sync();

    },
    error: function(error) {
        Ext.Msg.alert("Error: " + error.code + " " + error.message);
    }
    }); */
    },

    takePicture: function() {
        /****
        * Phonegap specific code
        * Camera Capture
        *
        ***/
        var me = this;
        var settings = {
            quality: 90,
            sourceType : Camera.PictureSourceType.PHOTOLIBRARY,
            encodingType: Camera.EncodingType.JPEG,
            destinationType: Camera.DestinationType.DATA_URL,
            saveToPhotoAlbum: false,
            allowEdit : true,
            targetWidth: 640,
            targetHeight: 640,
            correctOrientation: true
        };


        navigator.camera.getPicture(onSuccess, onFail, settings);

        function onSuccess(imageData) {

            //console.log(imageData);
            return 'data:image/jpeg;base64,'+imageData;

        }

        function onFail(message) {
            //alert('Failed because: ' + message);
            //dataview.show();
        }
    }

});
