/*
 * File: app/controller/AccountBalanceForm.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FP.controller.AccountBalanceForm', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'accountBalanceForm': 'showAccountBalanceForm',
            'accountBalanceForm/edit': 'showAccountBalanceFormEdit'
        },

        control: {
            "button#addTransaction": {
                tap: 'onAddTransactionTap'
            },
            "button#deleteTransaction": {
                tap: 'onDeleteTransactionTap'
            },
            "formpanel#accountBalanceForm": {
                activate: 'onAccountBalanceFormActivate',
                deactivate: 'onAccountBalanceFormDeactivate'
            }
        }
    },

    onAddTransactionTap: function(button, e, eOpts) {
        var form = Ext.ComponentQuery.query('#accountBalanceForm')[0],
            transactionValues = form.getValues(),
            errorMessage = '',
            model = Ext.create('FP.model.AccountBalance', transactionValues),
            errors = model.validate();


        // First, the form must be valid ...
        if(!errors.isValid()) {
            console.log(errors);
            errors.each(function(err) {
                errorMessage += err.getMessage() + '<br />';
            });

            Ext.Msg.alert('Transaction is invalid', errorMessage);

        } else {

            if(form.edit) {

                this.updateTransaction(transactionValues);

            } else {

                this.addTransaction(transactionValues);

            }
        }
    },

    onDeleteTransactionTap: function(button, e, eOpts) {
        var id = FP.config.Runtime.getTransaction().id;

        // TODO: Message are you sure you wish to delete this transaction
        this.deleteTransaction(id);

        this.redirectTo('accountBalance');
    },

    onAccountBalanceFormActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var main = Ext.getCmp('main');

        main.query('#back')[0].hide();
        main.query('#editUser')[0].setText('Cancel');
    },

    onAccountBalanceFormDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        var main = Ext.getCmp('main');

        main.query('#editUser')[0].setText('Edit');
        main.query('#back')[0].show();
    },

    showAccountBalanceForm: function() {
        var main = Ext.getCmp('main'),
            accountBalanceForm = Ext.create('FP.view.AccountBalanceForm'),
            back = main.query('#back')[0],
            accountMenu = main.query('#accountMenu')[0];

        accountMenu.hide();

        back.view = '#accountBalance';
        back.show();

        main.setActiveItem(accountBalanceForm);
    },

    showAccountBalanceFormEdit: function() {
        var main = Ext.getCmp('main'),
            accountBalanceForm = Ext.create('FP.view.AccountBalanceForm'),
            set = accountBalanceForm.getComponent('accountBalanceFormSet'),
            account = Ext.ComponentQuery.query('#account')[0],
            back = main.query('#back')[0],
            accountMenu = main.query('#accountMenu')[0],
            deleteButton = Ext.ComponentQuery.query('#deleteTransaction')[0],
            transaction = FP.config.Runtime.getTransaction();

        accountMenu.hide();
        account.hide();
        deleteButton.show();

        accountBalanceForm.edit = true;
        accountBalanceForm.setValues(transaction);
        set.setTitle('Edit Transaction');

        back.view = '#accountBalance';
        back.show();

        main.setActiveItem(accountBalanceForm);
    },

    updateBalance: function() {
        // Get UserAccounts Store... Get Current Record... Set balance... Sync Store...
        var store = Ext.getStore('userAccounts'),
            index = store.findExact('id', FP.config.Runtime.getUserAccount().id),
            record = store.getAt(index);

        console.log(record);

        record.set('balance', FP.app.calculateBalance());
        console.log(FP.app.calculateBalance());
        store.sync();
    },

    updateTransaction: function(transactionValues) {
        // get record in local storage and set new values and sync...
        var id = FP.config.Runtime.getTransaction().id,
            store = Ext.getStore('accountBalance'),
            index = store.findExact('id', id),
            record = store.getAt(index);

        record.set('amount', transactionValues.amount);
        record.set('description', transactionValues.description);
        record.set('date', transactionValues.date);

        store.sync();

        FP.config.Runtime.setAccountBalance(record.data);

        store.clearFilter();
        store.filter('userAccount_id', FP.config.Runtime.getUserAccount().id, false, true);


        this.updateBalance();
        this.redirectTo('accountBalance');
    },

    addTransaction: function(transactionValues) {
        var store = Ext.getStore('accountBalance'),
            model = Ext.create('FP.model.AccountBalance', transactionValues);

        model.set('category', 'testing');

        store.add(model);
        store.sync();

        FP.config.Runtime.setAccountBalance(model.data);

        store.clearFilter();
        store.filter('userAccount_id', FP.config.Runtime.getUserAccount().id, false, true);

        this.updateBalance();

        this.redirectTo('accountBalance');
    },

    deleteTransaction: function(id) {
        var store = Ext.getStore('accountBalance'),
            index = store.findExact('id', id),
            record = store.getAt(index);


        store.remove(record);
        store.sync();
        this.updateBalance();
    }

});