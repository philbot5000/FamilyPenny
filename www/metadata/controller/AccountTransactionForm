{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "AccountTransactionForm"
    },
    "designerId": "be074027-f3e4-4d5e-ad96-ae3274005ec7",
    "cn": [
        {
            "type": "Ext.app.Route",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "url": "accountBalanceForm",
                "fn": "showAccountBalanceForm",
                "implHandler": [
                    "var main = Ext.getCmp('main'),",
                    "    accountBalanceForm = Ext.create('FP.view.AccountBalanceForm'),",
                    "    back = main.query('#back')[0],",
                    "    accountMenu = main.query('#accountMenu')[0];",
                    "",
                    "accountMenu.hide();",
                    "",
                    "back.view = '#accountBalance';",
                    "back.show();",
                    "",
                    "main.setActiveItem(accountBalanceForm);"
                ]
            },
            "designerId": "f0fb9e4f-71ad-4c1f-9509-768ca32f0ad3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAddTransactionTap",
                "implHandler": [
                    "var form = Ext.ComponentQuery.query('#accountBalanceForm')[0],",
                    "    transactionValues = form.getValues(),",
                    "    errorMessage = '',",
                    "    model = Ext.create('FP.model.AccountBalance', transactionValues),",
                    "    errors = model.validate();",
                    "",
                    "",
                    "// First, the form must be valid ...",
                    "if(!errors.isValid()) {",
                    "    console.log(errors);",
                    "    errors.each(function(err) {",
                    "        errorMessage += err.getMessage() + '<br />';",
                    "    });",
                    "",
                    "    Ext.Msg.alert('Transaction is invalid', errorMessage);",
                    "",
                    "} else {",
                    "",
                    "    if(form.edit) {",
                    "",
                    "        this.updateTransaction(transactionValues);",
                    "",
                    "    } else {",
                    "",
                    "        this.createTransaction(transactionValues);",
                    "",
                    "    }",
                    "}"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#addTransaction"
            },
            "designerId": "c8fae1dc-0fba-41be-82f3-1d0a0b7ed7e1"
        },
        {
            "type": "Ext.app.Route",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "url": "accountBalanceForm/edit",
                "fn": "showAccountBalanceFormEdit",
                "implHandler": [
                    "var main = Ext.getCmp('main'),",
                    "    accountBalanceForm = Ext.create('FP.view.AccountBalanceForm'),",
                    "    set = accountBalanceForm.getComponent('accountBalanceFormSet'),",
                    "    account = Ext.ComponentQuery.query('#account')[0],",
                    "    back = main.query('#back')[0],",
                    "    accountMenu = main.query('#accountMenu')[0],",
                    "    deleteButton = Ext.ComponentQuery.query('#deleteTransaction')[0],",
                    "    transaction = FP.config.Runtime.getTransaction();",
                    "",
                    "accountMenu.hide();",
                    "account.hide();",
                    "deleteButton.show();",
                    "",
                    "accountBalanceForm.edit = true;",
                    "accountBalanceForm.setValues(transaction);",
                    "set.setTitle('Edit Transaction');",
                    "",
                    "back.view = '#accountBalance';",
                    "back.show();",
                    "",
                    "main.setActiveItem(accountBalanceForm);"
                ]
            },
            "designerId": "c111d9a5-4fc8-49be-83f6-ee552e8a734e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateBalance",
                "implHandler": [
                    "// Get UserAccounts Store... Get Current Record... Set balance... Sync Store...",
                    "var store = Ext.getStore('userAccounts'),",
                    "    index = store.findExact('id', FP.config.Runtime.getUserAccount().id),",
                    "    record = store.getAt(index),",
                    "    balance = FP.app.calculateBalance();",
                    "",
                    "",
                    "",
                    "var UserAccount = Parse.Object.extend(\"UserAccount\");",
                    "var query = new Parse.Query(UserAccount);",
                    "",
                    "query.equalTo(\"localId\", FP.config.Runtime.getUserAccount().id);",
                    "query.find({",
                    "    success: function(results) {",
                    "        // should be only one result ever...",
                    "\t\tvar userAccount = results[0];",
                    "        ",
                    "        /* Parse */",
                    "        userAccount.set('balance', balance);",
                    "        userAccount.save();",
                    "",
                    "\t\t/* Local */",
                    "        record.set('balance', balance);",
                    "        store.sync();",
                    "        ",
                    "",
                    "    },",
                    "    error: function(error) {",
                    "        Ext.Msg.alert(\"Error: \" + error.code + \" \" + error.message);",
                    "    }",
                    "});"
                ]
            },
            "designerId": "cbe40848-736e-4857-a5b1-c4ed37d62f52"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateTransaction",
                "designer|params": [
                    "transactionValues"
                ],
                "implHandler": [
                    "// get record in local storage and set new values and sync...",
                    "var id = FP.config.Runtime.getTransaction().id,",
                    "    store = Ext.getStore('accountBalance'),",
                    "    index = store.findExact('id', id),",
                    "    me = this,",
                    "    record = store.getAt(index);",
                    "",
                    "",
                    "var Transaction = Parse.Object.extend(\"Transaction\");",
                    "",
                    "var query = new Parse.Query(Transaction);",
                    "query.equalTo(\"localId\", id);",
                    "query.find({",
                    "    success: function(result) {",
                    "        console.log(result);",
                    "        /* Parse */",
                    "        parseRecord = result[0];",
                    "        ",
                    "        parseRecord.set('amount', transactionValues.amount);",
                    "        parseRecord.set('description', transactionValues.description);",
                    "        parseRecord.set('date', transactionValues.date);",
                    "",
                    "        parseRecord.save();",
                    "        ",
                    "        ",
                    "        /* Local */",
                    "        record.set('amount', transactionValues.amount);",
                    "        record.set('description', transactionValues.description);",
                    "        record.set('date', transactionValues.date);",
                    "        ",
                    "        store.sync();",
                    "        ",
                    "        FP.config.Runtime.setAccountBalance(record.data);",
                    "        ",
                    "        store.clearFilter();",
                    "        store.filter('userAccount_id', FP.config.Runtime.getUserAccount().id, false, true);",
                    "        ",
                    "        ",
                    "        me.updateBalance();",
                    "        me.redirectTo('accountBalance');",
                    "    },",
                    "    error: function(gameScore, error) {",
                    "        // Execute any logic that should take place if the save fails.",
                    "        // error is a Parse.Error with an error code and description.",
                    "        Ext.Msg.alert('Failed to create new object, with error code: ' + error.description);",
                    "    }",
                    "});",
                    ""
                ]
            },
            "designerId": "57a6978f-3240-4b1d-ac39-3b76e37b1fdb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createTransaction",
                "designer|params": [
                    "transactionValues"
                ],
                "implHandler": [
                    "var store = Ext.getStore('accountBalance'),",
                    "    model = Ext.create('FP.model.AccountBalance', transactionValues),",
                    "    me = this;",
                    "",
                    "//model.set('category', '');",
                    "",
                    "",
                    "var Transaction = Parse.Object.extend(\"Transaction\");",
                    "var pTransaction = new Transaction();",
                    "",
                    "",
                    "pTransaction.set(\"userAccount_id\", transactionValues.userAccount_id);",
                    "pTransaction.set(\"description\", transactionValues.description);",
                    "pTransaction.set(\"category\", transactionValues.category);",
                    "pTransaction.set(\"amount\", transactionValues.amount);",
                    "pTransaction.set(\"date\", transactionValues.date);",
                    "pTransaction.set(\"displayDate\", transactionValues.displayDate);",
                    "",
                    "pTransaction.save(null, {",
                    "    success: function(result) {",
                    "",
                    "        pRecord = result[0];",
                    "        var sModel = store.add(model);",
                    "        store.sync();",
                    "",
                    "",
                    "        result.set(\"localId\", sModel[0].data.id);",
                    "        result.save();",
                    "",
                    "        FP.config.Runtime.setAccountBalance(model.data);",
                    "        ",
                    "        store.clearFilter();",
                    "        store.filter('userAccount_id', FP.config.Runtime.getUserAccount().id, false, true);",
                    "        ",
                    "        me.updateBalance();",
                    "        ",
                    "        me.redirectTo('accountBalance');",
                    "    },",
                    "    error: function(gameScore, error) {",
                    "        // Execute any logic that should take place if the save fails.",
                    "        // error is a Parse.Error with an error code and description.",
                    "        alert('Failed to create new object, with error code: ' + error.description);",
                    "    }",
                    "});",
                    "",
                    ""
                ]
            },
            "designerId": "95b34d04-dfea-4c79-b92a-d6aca51aba48"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "deleteTransaction",
                "designer|params": [
                    "id"
                ],
                "implHandler": [
                    "var store = Ext.getStore('accountBalance'),",
                    "    index = store.findExact('id', id),",
                    "    record = store.getAt(index),",
                    "    me = this;",
                    "",
                    "",
                    "var Transaction = Parse.Object.extend(\"Transaction\");",
                    "",
                    "var query = new Parse.Query(Transaction);",
                    "query.equalTo(\"localId\", id);",
                    "query.find({",
                    "    success: function(results) {",
                    "        ",
                    "        results[0].destroy({});",
                    "        store.remove(record);",
                    "        store.sync();",
                    "        me.updateBalance();",
                    "    },",
                    "    error: function(gameScore, error) {",
                    "        // Execute any logic that should take place if the save fails.",
                    "        // error is a Parse.Error with an error code and description.",
                    "        Ext.Msg.alert('Failed to create new object, with error code: ' + error.description);",
                    "    }",
                    "});"
                ]
            },
            "designerId": "faa59142-7585-4533-9ff0-461d8047bc12"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDeleteTransactionTap",
                "implHandler": [
                    "var id = FP.config.Runtime.getTransaction().id;",
                    "",
                    "// TODO: Message are you sure you wish to delete this transaction",
                    "this.deleteTransaction(id);",
                    "",
                    "this.redirectTo('accountBalance');"
                ],
                "name": "tap",
                "designer|targetType": "Ext.Button",
                "designer|controlQuery": "button#deleteTransaction"
            },
            "designerId": "9823ecf3-01aa-4447-8354-097835de8596"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAccountBalanceFormActivate",
                "implHandler": [
                    "var main = Ext.getCmp('main');",
                    "",
                    "main.query('#back')[0].hide();",
                    "main.query('#editUser')[0].setText('Cancel');"
                ],
                "name": "activate",
                "designer|targetType": "Ext.form.Panel",
                "designer|controlQuery": "formpanel#accountBalanceForm"
            },
            "designerId": "558e1ec9-368f-4801-80b4-79b4b4fa7683"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAccountBalanceFormDeactivate",
                "implHandler": [
                    "var main = Ext.getCmp('main');",
                    "",
                    "main.query('#editUser')[0].setText('Edit');",
                    "main.query('#back')[0].show();"
                ],
                "name": "deactivate",
                "designer|targetType": "Ext.form.Panel",
                "designer|controlQuery": "formpanel#accountBalanceForm"
            },
            "designerId": "e9813b1b-498d-489a-bbe2-f5299487ff9e"
        }
    ]
}