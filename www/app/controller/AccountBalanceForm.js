/*
 * File: app/controller/AccountBalanceForm.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FP.controller.AccountBalanceForm', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'accountBalanceForm': 'showAccountBalanceForm'
        },

        control: {
            "hiddenfield#userAccount_id": {
                initialize: 'onUserAccount_idInitialize'
            },
            "button#addTransaction": {
                tap: 'onAddTransactionTap'
            }
        }
    },

    onUserAccount_idInitialize: function(component, eOpts) {

    },

    onAddTransactionTap: function(button, e, eOpts) {
        var form = Ext.ComponentQuery.query('#accountBalanceForm')[0],
            transactionValues = form.getValues(),
            store = Ext.getStore('accountBalance'),
            model = Ext.create('FP.model.AccountBalance', transactionValues),
            errorMessage,
            errors = model.validate();



        if(form.edit) {
            // get record in local storage and set new values and sync...
            var id = form.getValues().userAccount_id,
                index = store.findExact('id', id),
                record = store.getAt(index);

            //record.set('firstName', accountValues.firstName);
            //record.set('lastName', accountValues.lastName);

            //store.sync();
            //this.redirectTo('accounts');


        } else {

            if(!errors.isValid()) {
                errors.each(function(err) {
                    errorMessage += err.getMessage() + '\n';
                });

                alert('Work in progress'+errorMessage);
                console.log(errorMessage);

            } else {

                //model.set('date', new Date());
                model.set('category', 'testing');

                store.add(model);
                store.sync();
                FP.config.Runtime.setAccountBalance(model.data);

                this.updateBalance();

                this.redirectTo('accountBalance');
            }
        }
    },

    showAccountBalanceForm: function() {
        var main = Ext.getCmp('main'),
            accountBalanceForm = Ext.create('FP.view.AccountBalanceForm'),
            back = main.query('#back')[0];

        back.view = '#accountBalance';
        back.show();

        main.setActiveItem(accountBalanceForm);
    },

    updateBalance: function() {
        // Get UserAccounts Store... Get Current Record... Set balance... Sync Store...
        var store = Ext.getStore('userAccounts'),
            index = store.findExact('id', FP.config.Runtime.getUserAccount().id),
            record = store.getAt(index);


        record.set('balance', FP.app.calculateBalance());
        store.sync();
    }

});