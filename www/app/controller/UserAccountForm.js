/*
 * File: app/controller/UserAccountForm.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FP.controller.UserAccountForm', {
    extend: 'Ext.app.Controller',

    config: {
        routes: {
            'userAccountForm': 'showUserAccountForm',
            'userAccountForm/edit': 'showUserAccountFormEdit'
        },

        control: {
            "button#saveUserAccount": {
                tap: 'onSaveUserAccountTap'
            },
            "hiddenfield#account_id": {
                initialize: 'onAccount_idInitialize'
            },
            "selectfield#type": {
                change: 'onTypeChange'
            }
        }
    },

    onSaveUserAccountTap: function(button, e, eOpts) {
        var account = Ext.ComponentQuery.query('#userAccountForm')[0],
            accountValues = account.getValues(),
            model = Ext.create('FP.model.UserAccount', accountValues),
            errorMessage = '',
            errors = model.validate();



        if(!errors.isValid()) {

            errors.each(function(err) {
                errorMessage += err.getMessage() + '<br />';
            });

            Ext.Msg.alert('User account is invalid', errorMessage);

        } else {

            if(account.edit) {

                this.updateUserAccount(accountValues);

            } else {

                this.createUserAccount(accountValues);

            }
        }
    },

    onAccount_idInitialize: function(component, eOpts) {
        component.setValue(FP.config.Runtime.getAccount().id);
    },

    onTypeChange: function(selectfield, newValue, oldValue, eOpts) {
        this.showAccountOptions(newValue);
    },

    showUserAccountForm: function() {
        var main = Ext.getCmp('main'),
            addUserAccount = Ext.create('FP.view.UserAccountForm'),
            set = Ext.ComponentQuery.query('#userAccountSet')[0],
            back = main.query('#back')[0];

        back.view = '#userAccountForm';
        back.show();

        set.setTitle('Add Account');
        main.query('#accountMenu')[0].hide();
        main.setActiveItem(addUserAccount);
    },

    showUserAccountFormEdit: function() {
        var main = Ext.getCmp('main'),
            addUserAccount = Ext.create('FP.view.UserAccountForm'),
            back = main.query('#back')[0],
            set = Ext.ComponentQuery.query('#userAccountSet')[0],
            type = Ext.ComponentQuery.query('#type')[0],
            runtime = FP.config.Runtime,
            userAccount = runtime.getUserAccount();


        addUserAccount.edit = true;
        addUserAccount.setValues(userAccount);

        type.setDisabled(true);

        set.setTitle('Edit Account');

        main.query('#accountMenu')[0].hide();

        back.hide();

        main.setActiveItem(addUserAccount);
    },

    resetOldDefaultAccount: function() {
        // This function is called when a user sets an account to default.
        // Since there can be only one default account we must set all other accounts for 
        // this user back to default = false.


        // find the record that is default (should be only one).
        // set that record to dafualt false


        /* Local */
        var store = Ext.getStore('userAccounts');

        store.filter('account_id', FP.config.Runtime.getAccount().id);

        var index = store.findExact('defaultAccount', true);

        /* Local */
        if(index !== -1) {

            var record = store.getAt(index);        
            record.set('defaultAccount', false);
        }

        store.clearFilter();
    },

    resetParseDefaultAccount: function(localId, account_id) {
        /* This function accepts two parameters,
        * localId - the unique id for this account
        * account_id - the unique id for this user
        *
        */

        var UserAccount = Parse.Object.extend("UserAccount");
        var query = new Parse.Query(UserAccount);

        query.equalTo("account_id", FP.config.Runtime.getAccount().id);
        query.equalTo("defaultAccount", "true");
        query.find({
            success: function(results) {
                // should be only one result ever...

                console.log(results);





            },
            error: function(error) {
                Ext.Msg.alert("Error: " + error.code + " " + error.message);
            }
        });
    },

    deleteAccount: function(id) {
        // First delete all transactions from AccountBalance store where id = userAccount_id
        // Once all transactions are deleted remove account where id = id.

        // Filter store then use each function to iterate over and remove records
        // 

        var accountBalanceStore = Ext.getStore('accountBalance'),
            index = store.findExact('id', id),
            record = store.getAt(index);


    },

    showAccountOptions: function(account) {

        // **** TODO: Add conditional validation ...

        var term = Ext.ComponentQuery.query('#term')[0],
            interest = Ext.ComponentQuery.query('#interest')[0],
            creditLimit = Ext.ComponentQuery.query('#creditLimit')[0],
            loanAmount = Ext.ComponentQuery.query('#loanAmount')[0],
            termType = Ext.ComponentQuery.query('radiofield');

        switch(account) {
            case "Credit Account":
            term.hide();
            loanAmount.hide();
            creditLimit.show();
            interest.show();

            break;

            case "Cash Account":
            term.hide();
            interest.hide();
            loanAmount.hide();
            creditLimit.hide();
            break;

            case "Savings Account":
            interest.show();
            term.hide();
            loanAmount.hide();
            creditLimit.hide();
            break;

            case "Loan Account":
            interest.show();
            term.show();
            loanAmount.show();
            creditLimit.hide();
            //amount.show();
            break;
        }


    },

    updateNumberOfAccounts: function() {
        var store = Ext.getStore('userAccounts'),
            number = store.data.length,
            userId = FP.config.Runtime.getUserAccount().account_id;


        var Account = Parse.Object.extend("Account");
        var query = new Parse.Query(Account);

        query.equalTo("localId", userId);
        query.find({
            success: function(results) {
                // should only ever be one ...
                var parseRecord = results[0];
                /* Parse */
                parseRecord.set('accounts', number);
                parseRecord.save();

                /* Local */
                var accounts = Ext.getStore('accounts'),
                    index = accounts.findExact('id', userId),
                    user = accounts.getAt(index);

                user.set('accounts', number);
                accounts.sync();

            },
            error: function(error) {
                Ext.Msg.alert("Error: " + error.code + " " + error.message);
            }
        });
    },

    createUserAccount: function(accountValues) {
        var store = Ext.getStore('userAccounts'),
            model = Ext.create('FP.model.UserAccount', accountValues),
            me = this,
            amount = 0;


        // This should be a promise with Parse...
        // If default account has been set to true we must first reset old default account
        // to false on both Parse and Local
        // 


        model.set('balance', amount);

        var UserAccount = Parse.Object.extend("UserAccount");
        var pUserAccount = new UserAccount();


        if(accountValues.defaultAccount) {
            // TODO: Check this wit parse
            this.resetOldDefaultAccount();
        }

        pUserAccount.set("account_id", accountValues.account_id);
        pUserAccount.set("type", accountValues.type);
        pUserAccount.set("name", accountValues.name);
        pUserAccount.set("balance", amount);
        pUserAccount.set("interest", accountValues.interest);
        pUserAccount.set("term", accountValues.term);
        pUserAccount.set("defaultAccount", accountValues.defaultAccount);

        pUserAccount.save(null, {
            success: function(result) {

                pRecord = result[0];
                var sModel = store.add(model);
                store.sync();


                result.set("localId", sModel[0].data.id);
                result.save();

                FP.config.Runtime.setUserAccount(model.data);

                me.resetParseDefaultAccount(sModel[0].data.id, accountValues.account_id);
                me.updateNumberOfAccounts();


                FP.app.redirectTo('userAccounts');
            },
            error: function(gameScore, error) {
                // Execute any logic that should take place if the save fails.
                // error is a Parse.Error with an error code and description.
                alert('Failed to create new object, with error code: ' + error.description);
            }
        });



    },

    updateUserAccount: function(accountValues) {
        // get record in local storage and set new values and sync...
        var id = FP.config.Runtime.getUserAccount().id,
            store = Ext.getStore('userAccounts'),
            index = store.findExact('id', id),
            record = store.getAt(index),
            me = this;

        //Ext.ComponentQuery.query('#editUser')[0].setText('Edit');
        //Ext.ComponentQuery.query('#back')[0].show();

        if(accountValues.defaultAccount) {
            me.resetOldDefaultAccount();
        }



        /* Parse.com */

        var UserAccount = Parse.Object.extend("UserAccount");
        var query = new Parse.Query(UserAccount);
        query.equalTo("localId", id);
        query.find({
            success: function(results) {
                // should only ever be 1 record...
                var parseRecord = results[0];

                /* Local */
                record.set('name', accountValues.name);
                record.set('type', accountValues.type);
                record.set('interest', accountValues.interest);
                record.set('term', accountValues.term);
                record.set('defaultAccount', accountValues.defaultAccount);

                store.sync();

                /* Parse */
                parseRecord.set('name', accountValues.name);
                parseRecord.set('type', accountValues.type);
                parseRecord.set('interest', accountValues.interest);
                parseRecord.set('term', accountValues.term);
                parseRecord.set('defaultAccount', accountValues.defaultAccount);
                parseRecord.save();

                if(accountValues.defaultAccount) {
                    me.resetParseDefaultAccount(accountValues.id);
                }

                me.redirectTo('accountBalance');
            },
            error: function(error) {
                alert("Error: " + error.code + " " + error.message);
            }
        });
    }

});